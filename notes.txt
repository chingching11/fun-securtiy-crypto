List of Possbile Attacks and their Defenses

SQL Injection Defense 
    - use prepared sql statment
    - input sanitization: mysqli_real_escape_string

XSS Defense
    - sanitize incoming data
    - sanitizing all data before output
    - HTTPOnly cookies

Session Hijacking Defense
    - use encrypted communication TLS/SSL, HTTPS
    - use secure cookie 
    - regenerate session id after a successful login 
    - check user-agent matches from login 

Session Fixaton Defense
    - HttpOnly cookies 
    - accept session id from cookies
    - regenerate session id after a successful login 

Cookies Theft and Manipulation Defense
    - set cookies with a domain and path specified
    - HTTPOnly, secure
    - encrypt cookie data
    - sign cookie 

CSRF Defense 
    - do not use GET request for changing state
    - check if the request is made from same domain
    - use CSRF token: synchronizer token pattern when submitting a form
        - A token could be only valid for a limited time period, such as 5 or 10 minutes. 
        - The token generated could be unique for each form on the site. 
        - The session token and the form token could be different values which are complimentary. 